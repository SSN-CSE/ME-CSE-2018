* <<<CP1351>>> SCIENTIFIC PROGRAMMING USING PYTHON
:properties:
:author: T T Mirnalinee, J Bhuvana
:date: 29 June 2018
:end:

{{{credits}}}
| L | T | P | C |
| 2 | 0 | 2 | 3 |

# The course need to be made lighter (RSM, 2 July 2018).

** Course Objectives
- To learn fundamental concepts in Python programming such as
  variables, flow control structures and to work with lists and
  sequence data.
- To write Python functions to facilitate code reuse and to deal with
  errors in input.
- To introduce array computing and to work with dictionaries and
  strings.
- To explore Python's object-oriented features, random numbers and
  statistical computing.
- To introduce mathematical modeling and to work with discrete
  calculus, differentiation and integration.

{{{unit}}}
|Unit I|Python Fundamentals|9| 
Introduction -- Variables -- Objects -- Arithmetic operators --
Importing a module -- Interactive computing -- Python shell -- Type
conversion -- Symbolic computing; Loops and lists: While loop -- For
loops -- Lists -- List comprehension -- Nested lists -- Extracting
sublists -- Tuples.

{{{unit}}}
|Unit II|Functions and branching, File handling|9| 
Functions and branching: Python functions -- Local and global
variables -- Multiple arguments -- Multiple return values -- Functions
as arguments -- Branching- If-else blocks -- Inline if tests.  User
input and error handling : Reading keyboard input -- Reading from the
command line -- Reading data from file -- Writing data to file --
Handling errors -- Exception handling -- Raising exceptions -- Making
modules.

{{{unit}}}
|Unit III|Arrays, Dictionaries and Strings|10| 
Array computing and curve plotting : Vectors -- Basics of numerical Python arrays --  
Vectorization -- advanced vectorization of functions --  Curve plotting -- Matrices and arrays.
Dictionaries and Strings: Making dictionaries -- Dictionary operations --  Strings -- 
operations on strings -- Reading and writing spreadsheet files.

{{{unit}}}
|Unit IV|Classes, Random Numbers |9| 
Introduction to classes: Simple function classes -- Representing a function as a class -- 
Special methods -- Adding objects -- Static methods and attributes.
Random numbers : Drawing random numbers --  Drawing integers -- Computing probabilities -- 
Monte Carlo integration -- Random walk in one space and two space dimensions.
 
{{{unit}}}
|Unit V|Object-Oriented Programming|8|
Object-Oriented Programming: Inheritance  --  Superclass for defining an interface -- 
Class hierarchies; Sequences and difference equations --  Mathematical models based on difference equations -- 
Programming with sound;  Introduction to discrete calculus --  Discrete functions  -- 
Differentiation becomes finite differences --  Integration becomes summation --  
Taylor series;  Introduction to differential equations --  Exponential growth --  Logistic growth. 

\hfill *Total:45*

** Course Outcomes
After the completion of this course, students will be able to: 
- Write Python programs using decision and repetition structures in
  program design. (K3)
- Demonstrate a basic knowledge of numerical computing using
  functions, error handling and file handling. (K3)
- Develop applications to demonstrate the understanding of arrays
  dictionaries and strings. (K3)
- Master the principles of object-oriented programming and able to
  generate random numbers and use them to run stochastic
  simulations. (K4)
- Write code in Python to solve problems requiring the discrete
  calculus, Differentiation, Integration and scientific
  simulations. (K3)
      
** References
1.  Hans Petter Langtangen, ``A Primer on Scientific Programming with
   Python'', 4th Edition, Springer, 2016.

 
