* <<<CP1351>>> SCIENTIFIC PROGRAMMING USING PYTHON
:properties:
:author: T T Mirnalinee, J Bhuvana
:date: 29 June 2018
:end:

{{{credits}}}
| L | T | P | C |
| 2 | 0 | 2 | 3 |

# The course need to be made lighter (RSM, 2 July 2018).

** Course Objectives
- To learn fundamental concepts in Python programming such as
  variables, flow control structures and to work with lists and
  sequence data.
- To write Python functions to facilitate code reuse.
- To introduce array computing and to work with dictionaries and
  strings.
- To introduce mathematical modeling and to work with discrete
  calculus, differentiation and integration.

{{{unit}}}
|Unit I|Python Fundamentals|9| 
Introduction -- Variables -- Objects -- Arithmetic operators --
Importing a module -- Interactive computing -- Python shell -- Type
conversion -- Symbolic computing; Loops and lists: While loop -- For
loops -- Lists -- List comprehension -- Nested lists -- Extracting
sublists -- Tuples.

{{{unit}}}
|Unit II|Functions and branching, File handling|9| 
Functions and branching: Functions -- Local and global variables --
Multiple arguments -- Multiple return values -- Functions as arguments
-- Branching: If-else blocks -- Inline if tests.  User input: Reading
keyboard input -- Reading from the command line -- Reading data from
file -- Writing data to file.
#+BEGIN_COMMENT
User input and error handling: Reading keyboard input -- Reading from
the command line -- Reading data from file -- Writing data to file --
Handling errors -- Exception handling -- Raising exceptions -- Making
modules.
#+END_COMMENT

{{{unit}}}
|Unit III|Arrays, Dictionaries|8 | 
Array computing and curve plotting : Vectors -- Basics of numerical
Python arrays -- vectorization -- Curve plotting -- Matrices and
arrays.  Dictionaries: Making dictionaries -- Dictionary
operations.
# advanced vectorization of functions --  

{{{unit}}}
|Unit IV| Strings, Classes  |10 | 
Strings: Operations on strings -- Reading and writing spreadsheet
files; Introduction to classes: Simple function classes --
Representing a function as a class -- Special methods -- Adding
objects -- Static methods and attributes.
#+BEGIN_COMMENT
Random numbers: Drawing random numbers -- Drawing integers --
Computing probabilities -- Monte Carlo integration -- Random walk in
one space and two space dimensions.
#+END_COMMENT
 
{{{unit}}}
|Unit V|Sequences and difference equations|9 |
Mathematical models based on difference equations; Introduction to
discrete calculus: Discrete functions -- Differentiation becomes
finite differences -- Integration becomes summation -- Taylor series;
Introduction to differential equations -- Exponential growth --
Logistic growth.
#+BEGIN_COMMENT
Object-Oriented Programming: Inheritance -- Superclass for defining an
interface -- Class hierarchies;
#+END_COMMENT
\hfill *Total:45*

** Course Outcomes
After the completion of this course, students will be able to: 
- Write Python programs using decision and repetition structures in
  program design. (K3)
- Demonstrate a basic knowledge of numerical computing using
  functions, error handling and file handling. (K3)
- Develop applications to demonstrate the understanding of arrays
  dictionaries and strings. (K3)
- Write code in Python to solve problems requiring the discrete
  calculus, Differentiation, Integration and scientific
  simulations. (K3)
      
** References
1.  Hans Petter Langtangen, ``A Primer on Scientific Programming with
   Python'', 4th Edition, Springer, 2016.

 
